@model Student_Enrollment_System.Models.Student
@{
ViewBag.Title = "Enrollment";
Layout = "~/Views/Shared/StudentHeader.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enrollment - Enrollment System</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <style>
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .content-section {
            padding: 30px;
            flex-grow: 1;
        }
        #subjectSelectionArea {
            display: none;
        }
        .info-display-box {
            background-color: #e9ecef;
            padding: 15px;
            border-radius: .3rem;
            margin-bottom: 20px;
            font-size: 1.1rem;
            font-weight: 500;
            color: #343a40;
        }
        .schedule-info {
            font-size: 0.85rem;
            color: #6c757d;
        }
        .table th, .table td {
            vertical-align: middle;
        }
    </style>
</head>
<body>

<div class="container content-section">
    <h1 class="mb-4">Student Enrollment</h1>
    <p class="lead">Begin your enrollment process, select subjects, and confirm your course load for the upcoming academic term.</p>

    <div class="card mt-4">
        <div class="card-body">
            <h5 class="card-title mb-4">Student Information</h5>
            @using (Html.BeginForm("Enrollment", "Student", FormMethod.Post, new { id = "enrollmentForm" }))
            {
            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="studentId" class="form-label">Student ID</label>
                    @Html.TextBoxFor(model => model.Id, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-3">
                    <label for="schoolYear" class="form-label">School Year</label>
                    <select class="form-select" id="schoolYear" name="enrollmentSemester">
                        <option value="" selected disabled>Choose Academic Year...</option>
                        @{
                        var academicYears = ViewBag.AcademicYears as List<Student_Enrollment_System.Models.AcademicYear>;
                        if (academicYears?.Any() == true)
                        {
                        foreach (var year in academicYears)
                        {
                        <option value="@year.Code">@year.StartYear - @year.EndYear</option>
                        }
                        }
                        else
                        {
                        <option disabled>No academic years available</option>
                        }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="enrollmentSemester" class="form-label">Semester</label>
                    <select class="form-select" id="enrollmentSemester" name="enrollmentSemester">
                        @{
                        var semesters = ViewBag.Semesters as List<Student_Enrollment_System.Models.Semester>;
                        if (semesters?.Any() == true)
                        {
                        foreach (var sem in semesters)
                        {
                        <option value="@sem.Id">@sem.Name</option>
                        }
                        }
                        else
                        {
                        <option disabled>No semesters available</option>
                        }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="studentStatus" class="form-label">Student Status</label>
                    <select class="form-select" id="studentStatus" name="studentStatus">
                        <option selected disabled>Choose...</option>
                        <option value="Regular">Regular</option>
                        <option value="Irregular">Irregular</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="enrollmentStatus" class="form-label">Enrollment Status</label>
                    <select class="form-select" id="enrollmentStatus" name="enrollmentStatus">
                        <option selected disabled>Choose...</option>
                        <option value="New">New</option>
                        <option value="Old">Old</option>
                        <option value="Transferee">Transferee</option>
                        <option value="Cross-Enrollee">Cross-Enrollee</option>
                    </select>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4">
                    <label for="lastName" class="form-label">Last Name</label>
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", @readonly = "readonly" })                    </div>
                <div class="col-md-4">
                    <label for="firstName" class="form-label">First Name</label>
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", @readonly = "readonly" })                    </div>
                <div class="col-md-4">
                    <label for="middleName" class="form-label">Middle Name</label>
                    @Html.TextBoxFor(model => model.MiddleName, new { @class = "form-control", @readonly = "readonly" })                    </div>
            </div>

            <div class="mb-3">
                <label for="homeAddress" class="form-label">Home Address</label>
                @Html.TextBoxFor(model => model.HomeAddress, new { @class = "form-control", @readonly = "readonly" })                </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="contactNumber" class="form-label">Contact Number</label>
                    @Html.TextBoxFor(model => model.Contact, new { @class = "form-control", @readonly = "readonly" })                    </div>
                <div class="col-md-6">
                    <label for="email" class="form-label">Email</label>
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @readonly = "readonly" })                    </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-3">
                    <label for="yearLevel" class="form-label">Year Level</label>
                    <select class="form-select" id="yearLevel" name="yearLevel">
                        @{
                        var yearLevels = ViewBag.YearLevels as List<Student_Enrollment_System.Models.YearLevel>;
                        if (yearLevels?.Any() == true)
                        {
                        foreach (var yearLevel in yearLevels)
                        {
                        <option value="@yearLevel.Id">@yearLevel.Title</option>
                        }
                        }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="program" class="form-label">Program</label>
                    <select class="form-select" id="program" name="program">
                        <option value="" selected disabled>Choose Program...</option>
                        @{
                            var programs = ViewBag.Programs as List<Student_Enrollment_System.Models.Program>;
                            }
                            @if (programs != null && programs.Any())
                            {
                                foreach (var program in programs)
                                {
                                <option value="@program.Code">@program.Title</option>
                                }
                            }
                            else
                            {
                            <option disabled>No programs found</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="blockSection" class="form-label">Block Section</label>
                    <input type="text" class="form-control" id="blockSection" name="blockSection" placeholder="e.g., IT-A">
                </div>
            </div>

            <hr class="my-4">

            <h5 class="card-title">Subject Selection</h5>
            <p class="text-danger">Note: ONLY Irregular Students will fill out this section.</p>
            <button type="button" class="btn btn-info mb-3" id="selectSubjectsBtn">SELECT SUBJECTS</button>

            <div id="subjectSelectionArea">
                <h5 class="card-title">Available Subjects</h5>
                <div class="table-responsive mb-3">
                    <table class="table table-bordered table-striped">
                        <thead>
                        <tr>
                            <th>Course</th>
                            <th>Description</th>
                            <th>Units</th>
                            <th>Lec</th>
                            <th>Lab</th>
                            <th>Action</th>
                        </tr>
                        </thead>
                        <tbody id="availableSubjectsTableBody">
                        <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>

                <h6 class="mb-2">Selected Subjects</h6>
                <div class="table-responsive">
                    <table class="table table-bordered table-striped">
                        <thead>
                        <tr>
                            <th>Schedule Id</th>
                            <th>Course</th>
                            <th>Description</th>
                            <th>Units</th>
                            <th>Time</th>
                            <th>Day</th>
                            <th>Room</th>
                            <th>Action</th>
                        </tr>
                        </thead>
                        <tbody id="selectedSubjectsTableBody">
                        <!-- Will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
                <p class="card-text mt-3"><strong>Total Units:</strong> <span id="totalUnitsDisplay">0</span></p>
            </div>

            <button type="submit" class="btn btn-primary mt-4">CONFIRM ENROLLMENT</button>
            }
        </div>
    </div>

    <!-- Schedule Selection Modal -->
    <div class="modal fade" id="scheduleSelectionModal" tabindex="-1" role="dialog" aria-labelledby="scheduleSelectionModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="scheduleSelectionModalLabel">Select Schedule</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Schedule options will be inserted here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary">Confirm Selection</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function() {
        let selectedCourses = [];
        let studentYearLevel = 1;
        let studentProgram = '';
        let academicYear = '';
        let semesterId = 1;
        let curriculumCode = '';
        let availableCourses = [];

        // Initialize form elements
        $('#yearLevel').change(function() {
            studentYearLevel = $(this).val();
            loadAvailableCourses();
        });

        $('#program').change(function() {
            studentProgram = $(this).val();
            loadAvailableCourses();
        });

        $('#schoolYear').change(function() {
            academicYear = $(this).val();
            loadAvailableCourses();
        });

        $('#enrollmentSemester').change(function() {
            semesterId = $(this).val();
            loadAvailableCourses();
        });

        $('#selectSubjectsBtn').click(function() {
            $('#subjectSelectionArea').show();
            loadAvailableCourses();
        });

        function loadAvailableCourses() {
            if (!studentYearLevel || !studentProgram || !academicYear || !semesterId) {
                console.log('Missing required parameters');
                return;
            }

            // Get curriculum code based on program and academic year
            $.get(`/Student/Enrollment/GetCurriculum?progCode=${studentProgram}&ayCode=${academicYear}`, function(curriculumResponse) {
                if (curriculumResponse.success) {
                    curriculumCode = curriculumResponse.data.curCode;

                    // Now get available courses
                    $.get(`/Student/Enrollment/GetAvailableCourse?yearLevel=${studentYearLevel}&semesterId=${semesterId}&progCode=${studentProgram}&ayCode=${academicYear}&curCode=${curriculumCode}`,
                        function(courseResponse) {
                            if (courseResponse.success) {
                                availableCourses = courseResponse.data;
                                populateAvailableCourses(courseResponse.data);
                            } else {
                                console.error('Failed to load courses:', courseResponse.message);
                                $('#availableSubjectsTableBody').html('<tr><td colspan="6" class="text-center">No available courses found</td></tr>');
                            }
                        }).fail(function() {
                        console.error('AJAX request failed');
                        $('#availableSubjectsTableBody').html('<tr><td colspan="6" class="text-center">Error loading courses</td></tr>');
                    });
                } else {
                    console.error('Failed to get curriculum:', curriculumResponse.message);
                }
            });
        }

        function populateAvailableCourses(courses) {
            const $tableBody = $('#availableSubjectsTableBody');
            $tableBody.empty();

            if (courses.length === 0) {
                $tableBody.append('<tr><td colspan="6" class="text-center">No available courses for the selected criteria</td></tr>');
                return;
            }

            courses.forEach(course => {
                $tableBody.append(`
            <tr>
                <td>${course.Code}</td>
                <td>${course.Title}</td>
                <td>${course.Units}</td>
                <td>${course.LecHours}</td>
                <td>${course.LabHours}</td>
                <td>
                    <button type="button" 
                            class="btn btn-success btn-sm add-subject-btn"
                            data-course-code="${course.Code}">
                        Add
                    </button>
                </td>
            </tr>
        `);
            });
        }

        function updateSelectedSubjectsTable() {
            const $tableBody = $('#selectedSubjectsTableBody');
            $tableBody.empty();

            if (!selectedCourses || !Array.isArray(selectedCourses) || selectedCourses.length === 0) {
                $tableBody.append('<tr><td colspan="8" class="text-center">No selected courses</td></tr>');
                return;
            }

            selectedCourses.forEach(course => {
                try {
                    // 1. Find the course in availableCourses
                    const courseInfo = availableCourses.find(c => c.Code === course.code);
                    if (!courseInfo) {
                        console.error('Course not found:', course.code);
                        $tableBody.append(`<tr class="table-danger"><td colspan="8">Course ${course.code} not found</td></tr>`);
                        return;
                    }

                    // 2. Find the specific schedule (with type conversion)
                    const selectedScheduleId = Number(course.scheduleDetails);
                    const scheduleInfo = courseInfo.ScheduleDetails?.find(s =>
                        Number(s.ScheduleId) === selectedScheduleId
                    );

                    if (!scheduleInfo) {
                        console.error('Schedule not found:', {
                            course: course.code,
                            scheduleId: course.scheduleDetails,
                            availableSchedules: courseInfo.ScheduleDetails?.map(s => s.ScheduleId)
                        });
                        $tableBody.append(`<tr class="table-warning"><td colspan="8">Schedule ${course.scheduleDetails} not found for ${course.code}</td></tr>`);
                        return;
                    }

                    // 3. Validate and format time slots
                    let timeSlots = 'No schedule';
                    let days = '?';

                    if (scheduleInfo.TimeSlots && Array.isArray(scheduleInfo.TimeSlots)) {
                        timeSlots = scheduleInfo.TimeSlots.map(slot => {
                            try {
                                const formatTime = (time) => {
                                    if (!time || time.Hours === undefined || time.Minutes === undefined) {
                                        return '--:--';
                                    }
                                    const hours = time.Hours % 12 || 12;
                                    const minutes = time.Minutes.toString().padStart(2, '0');
                                    const ampm = time.Hours >= 12 ? 'PM' : 'AM';
                                    return `${hours}:${minutes} ${ampm}`;
                                };
                                return `${formatTime(slot.StartTime)}-${formatTime(slot.EndTime)}`;
                            } catch (e) {
                                console.error('Error formatting time slot:', slot, e);
                                return 'Invalid time';
                            }   
                        }).join('<br>');

                        days = scheduleInfo.TimeSlots.map(slot => slot.Day || '?').join('/');
                    }

                    // 4. Render the row
                    $tableBody.append(`
                <tr>
                    <td>${scheduleInfo.ScheduleId || 'N/A'}</td>
                    <td>${courseInfo.Code || 'N/A'}</td>
                    <td>${courseInfo.Title || 'N/A'}</td>
                    <td>${courseInfo.Units || '0'}</td>
                    <td>${timeSlots}</td>
                    <td>${days}</td>
                    <td>${scheduleInfo.RoomNumber || 'TBA'}</td>
                    <td>
                        <button type="button" 
                                class="btn btn-danger btn-sm remove-subject-btn"
                                data-course-code="${course.code}">
                            Remove
                        </button>
                    </td>
                </tr>
            `);

                } catch (error) {
                    console.error('Error rendering course:', course, error);
                    $tableBody.append(`
                <tr class="table-danger">
                    <td colspan="8">Error displaying course ${course.code || 'unknown'}</td>
                </tr>
            `);
                }
            });
        }

        function updateTotalUnits() {
            let totalUnits = 0;
            selectedCourses.forEach(course => {
                const courseInfo = availableCourses.find(c => c.Code === course.code);
                totalUnits += courseInfo.Units;
            });
            $('#totalUnitsDisplay').text(totalUnits);
        }

        $(document).on('click', '.add-subject-btn', function() {
            const courseCode = $(this).data('course-code');

            if (selectedCourses.some(c => c.code === courseCode)) {
                alert('This course is already selected');
                return;
            }

            const $modal = $('#scheduleSelectionModal');
            const $modalBody = $modal.find('.modal-body');
            $modalBody.empty();

            $modalBody.append('<h5>Select Schedule Option:</h5>');

            const course = availableCourses.find(c => c.Code === courseCode);
            const $table = $('<table class="table table-bordered"><thead><tr><th>Schedule ID</th><th>Time</th><th>Day</th><th>Room</th><th>Select</th></tr></thead><tbody></tbody></table>');
            const $tableBody = $table.find('tbody');

            course.ScheduleDetails.forEach(schedule => {
                // Format time slots
                const timeSlots = schedule.TimeSlots.map(slot => {
                    const formatTime = (time) => {
                        const hours = time.Hours % 12 || 12;
                        const minutes = time.Minutes.toString().padStart(2, '0');
                        const ampm = time.Hours >= 12 ? 'PM' : 'AM';
                        return `${hours}:${minutes} ${ampm}`;
                    };
                    return `${formatTime(slot.StartTime)}-${formatTime(slot.EndTime)}`;
                }).join('<br>');

                // Format days
                const days = schedule.TimeSlots.map(slot => slot.Day).join('/');

                const $row = $('<tr></tr>');
                $row.append(`<td>${schedule.ScheduleId}</td>`);
                $row.append(`<td>${timeSlots}</td>`);
                $row.append(`<td>${days}</td>`);
                $row.append(`<td>${schedule.RoomNumber}</td>`);

                const $radioCell = $('<td></td>');
                const $radioDiv = $('<div class="form-check"></div>');
                const $radio = $(`<input class="form-check-input" type="radio" name="scheduleOption" id="schedule${schedule.ScheduleId}" value="${schedule.ScheduleId}">`);
                const $label = $(`<label class="form-check-label" for="schedule${schedule.ScheduleId}">Select</label>`);

                // Check for schedule conflicts
                const hasConflict = schedule.TimeSlots.some(slot =>
                    checkScheduleConflict(slot, selectedCourses)
                );

                if (hasConflict) {
                    $radio.prop('disabled', true);
                    $label.append('<span class="text-danger"> (Conflict)</span>');
                    $row.addClass('table-danger');
                }

                $radioDiv.append($radio).append($label);
                $radioCell.append($radioDiv);
                $row.append($radioCell);

                $tableBody.append($row);
            });

            $modalBody.append($table);

            // Set up modal buttons
            $modal.find('.btn-primary').off('click').on('click', function() {
                const selectedSchedule = $modalBody.find('input[name="scheduleOption"]:checked').val();

                if (!selectedSchedule) {
                    alert('Please select a schedule option');
                    return;
                }

                // Add the selected course and schedule
                selectedCourses.push({
                    code: courseCode,
                    scheduleDetails: selectedSchedule
                });

                updateSelectedSubjectsTable();
                updateTotalUnits();
                $modal.modal('hide');
            });

            $modal.modal('show');
        });

        function checkScheduleConflict(newSlot, selectedCourses) {
            for (const course of selectedCourses) {
                const courseInfo = availableCourses.find(c => c.Code === course.code);
                if (!courseInfo) continue;

                const schedule = courseInfo.ScheduleDetails.find(s => s.ScheduleId === course.scheduleDetails);
                if (!schedule) continue;

                for (const existingSlot of schedule.timeSlots) {
                    if (existingSlot.Day === newSlot.Day) {
                        const newStart = newSlot.StartTime.Hours * 60 + newSlot.StartTime.Minutes;
                        const newEnd = newSlot.EndTime.Hours * 60 + newSlot.EndTime.Minutes;
                        const existingStart = existingSlot.StartTime.Hours * 60 + existingSlot.StartTime.Minutes;
                        const existingEnd = existingSlot.EndTime.Hours * 60 + existingSlot.EndTime.Minutes;

                        // Check for time overlap
                        if ((newStart >= existingStart && newStart < existingEnd) ||
                            (newEnd > existingStart && newEnd <= existingEnd) ||
                            (newStart <= existingStart && newEnd >= existingEnd)) {
                            return true; // Conflict found
                        }
                    }
                }
            }
            return false; // No conflicts
        }

        $(document).on('click', '.remove-subject-btn', function() {
            const courseCode = $(this).data('course-code');
            selectedCourses = selectedCourses.filter(c => c.code !== courseCode);
            updateSelectedSubjectsTable();
            updateTotalUnits();
        });


        // Form submission handler
        $('#enrollmentForm').submit(function(e) {
            e.preventDefault();

            // Validate at least one course is selected
            if (selectedCourses.length === 0) {
                Swal.fire({
                    title: 'Error',
                    text: 'Please select at least one course before submitting.',
                    icon: 'error'
                });
                return;
            }
            
            const studentId = parseInt($('#Id').val());
            const semesterId = parseInt($('#enrollmentSemester').val());
            const yearLevel = parseInt($('#yearLevel').val());
            // Collect form values
            const formData = {
                Student : {
                    Id: studentId,
                    FirstName: $('#FirstName').val(),
                    LastName: $('#LastName').val(),
                    MiddleName: $('#MiddleName').val(),
                    HomeAddress: $('#HomeAddress').val(),
                    Contact: $('#Contact').val(),
                    Email: $('#Email').val(),
                    YearLevel:yearLevel,
                    Program: $('#program').val(),
                    Semester: semesterId,
                    Status: $('#studentStatus').val(),
                    BlockSection: $('#blockSection').val(),
                },
                Enrollment: {
                    EnrollmentStatus: $('#enrollmentStatus').val(),
                    AcademicYear: academicYear,
                    StudentId: studentId,
                    Semester: semesterId,
                    YearLevel: yearLevel,
                },
                EnrollingCourses : Array.from(selectedCourses).map(code => ({
                        CourseCode: code.code,
                        ScheduleId: parseInt(code.scheduleDetails.ScheduleId)
                    }))
                
                
            };

            // Submit via AJAX
            $.ajax({
                url: '/Student/Enrollment/SubmitForm', 
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Success!',
                            text: response.message || 'Enrollment submitted successfully.',
                            icon: 'success',
                            confirmButtonText: 'OK',
                            willClose: () => {
                                window.location.href = response.redirectUrl || '/Student/Enrollment/Confirmation';
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: response.error || 'Failed to submit enrollment.',
                            icon: 'error'
                        });
                    }
                },
                error: function(xhr, status, error) {
                    let errorMessage = xhr.responseJSON?.error || 'An unexpected error occurred.';
                    Swal.fire({
                        title: 'Error',
                        text: errorMessage,
                        icon: 'error'
                    });
                }
            });
        });
        
        
    });
</script>
}
</body>
</html>